// Code generated by vfsgen; DO NOT EDIT.

// +build !gen

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 10, 12, 20, 21, 22, 96983309, time.UTC),
		},
		"/assets": &vfsgen۰DirInfo{
			name:    "assets",
			modTime: time.Date(2018, 10, 12, 20, 23, 19, 304518084, time.UTC),
		},
		"/dev": &vfsgen۰DirInfo{
			name:    "dev",
			modTime: time.Date(2018, 10, 12, 20, 18, 19, 655394531, time.UTC),
		},
		"/static": &vfsgen۰DirInfo{
			name:    "static",
			modTime: time.Date(2018, 10, 13, 0, 58, 42, 969783728, time.UTC),
		},
		"/static/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2018, 10, 12, 20, 44, 53, 567679693, time.UTC),
			uncompressedSize: 2162,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4d\x6f\xe3\x36\x10\x3d\x5b\xbf\x62\xaa\xa2\x80\x0c\x24\xa4\x9d\x60\x81\x20\xfe\x40\xdb\xcb\x1e\x5b\xec\x1e\xf6\x4c\x93\x23\x8b\x5a\x8a\x54\xc8\xd1\x6a\x85\x20\xff\xbd\xa0\xe8\x8f\xda\xa8\x9d\x14\x89\x00\x5b\xe6\x90\xef\xbd\x99\xa7\x19\x43\xcb\x8a\x1a\xb3\xce\x00\x00\x96\x15\x0a\x95\x7e\x8e\x4b\xa3\xed\x77\xf0\x68\x56\x79\xa0\xc1\x60\xa8\x10\x29\x87\xca\x63\xb9\xca\x2b\xa2\x36\x3c\x72\x2e\x95\xad\x03\x93\xc6\x75\xaa\x34\xc2\x23\x93\xae\xe1\xa2\x16\x3f\xb9\xd1\x9b\xc0\x03\x36\xc2\x92\x96\xb7\x9d\xe6\x77\xec\x9e\xdd\x1f\x22\xac\xd1\x96\xc9\x10\x72\xe0\x1f\x2b\x59\x07\xf2\x88\xfc\x9e\xdd\xb3\x4f\x9c\x2a\x6c\x30\x70\x85\xa5\xe8\x0c\xf1\x91\xf4\x5d\xca\xac\x0e\x0a\x8d\xfe\xe1\x99\x45\xe2\xb6\x6d\x78\xfd\xd4\x7a\xd7\xa2\xa7\x61\xeb\xb5\xfa\x7d\xce\x66\x6c\xc6\xeb\xa7\xbf\x77\xc1\xcf\x5e\xab\x51\x6d\x9d\x1d\xc5\x82\xf4\xba\x25\x08\x5e\xbe\xbd\xac\xa7\x0e\xfd\x30\x96\x35\xdf\x2d\xc6\x42\xea\x90\xaf\x97\x3c\x11\xae\x3f\x40\xa1\xd3\x7c\xce\xe6\x77\x07\x91\xdb\x4e\x5f\xd1\x79\x97\xe0\x2b\xcd\x71\xa2\x78\x10\x7c\x9f\x62\x8b\x92\x7c\xd7\xf0\x39\x7b\x60\xb3\xc3\xf2\x9a\x91\xff\xdd\x17\x34\xb4\xb8\xca\x09\x7f\x12\x1f\x3b\xe9\xff\x0d\xc5\x95\x2c\x52\xa7\x7c\x88\xbd\x27\x83\x90\x16\x6f\xed\x18\x76\xde\xc0\x97\x30\xd1\x92\xe3\x3a\x5e\xbf\xee\xa6\x41\x63\x00\x12\x1b\x83\xf0\x7c\xb2\x1f\xaf\x5e\x2b\xaa\x1e\xe1\x61\xf6\xdb\xe2\x64\xef\xe5\x32\x93\x67\xed\xf6\x8b\xeb\x81\xd4\x63\xa9\x7d\xa0\x5b\x59\x69\xa3\x2e\x73\xdf\x7d\xba\xc8\xbd\xe4\xbb\xb4\x27\x27\x35\xf7\x22\x34\x67\x75\xee\x0f\xac\xb3\xc9\x44\x97\x50\xfc\xf2\x0d\x37\x7f\x84\x80\xcd\xc6\x0c\x4c\xdb\x40\xb1\x59\x05\xe1\x57\xf2\x28\x1a\x6d\xb7\x53\x78\x06\xce\xa1\x75\x66\x28\xb5\x31\xd9\x64\x32\x79\x0d\x02\x2b\x10\x61\xb0\x12\x0a\x8f\xa1\xbd\x01\xdd\xb4\xce\xd3\x5f\x9b\x1a\x25\x4d\x61\xb5\x86\xe7\xc8\x32\x91\xce\x06\x82\xe0\x3a\x2f\x31\x42\x7a\xa1\x09\x8a\x74\x8b\xc0\x29\x13\xde\x8b\xe1\xcf\xae\x2c\xd1\x17\xd3\xc5\x08\xf2\x48\x9d\xb7\xbb\xc3\x17\x12\x29\x12\xe7\x99\xf0\x88\x7f\x89\xdf\x2f\x59\xb6\x57\xdf\x3a\x58\x81\xc5\x1e\x3e\xbb\xa4\x60\x90\xa0\x71\xea\x06\x22\xdf\x22\x1e\x2c\x3b\x2b\x49\x3b\x1b\x27\xc6\x09\x55\x4c\x53\xfa\xaf\x99\x50\x94\x48\xb2\x2a\x72\xd1\xb6\x2c\x3e\x87\x7c\x7a\x03\x5b\xc7\x4e\x52\x62\x54\xa1\x2d\x8e\x5e\x75\xe6\xdf\xfe\x34\x4e\xc1\x0a\x52\x98\x35\x4e\x75\x06\x93\x07\x51\xee\xb8\x93\xc4\xe5\x6e\x8f\xf3\x58\x98\x33\xc8\xa4\x41\x71\xb0\x2d\xf9\xb5\x75\xcc\x77\xb6\x88\x88\xe9\x09\xd5\x75\x3b\x47\x3f\xce\x73\x5f\xc4\xae\xf0\x18\x90\x60\x9f\xc1\x68\x70\x22\xfe\x21\x3c\xf4\x61\xe7\xed\x37\xdc\x7c\x75\xf2\x3b\x52\x91\xf7\x71\xc8\x8d\x93\xc2\x54\x2e\xd0\xe3\xc3\xec\x61\xc6\x93\xaf\x79\x02\xf6\x81\x39\xeb\x5a\xb4\xb0\x82\xe2\xac\x59\x62\x55\xc6\x6d\x8b\xfc\xcb\x88\x40\x0f\x1e\x85\x1a\x18\x63\x11\x3c\xaa\x1f\x28\x1a\x0c\x41\x6c\xf1\x8c\xa5\x1f\xff\x5b\x02\x1e\xbb\x29\x3d\xd2\xc5\x1e\x1c\x3f\xfb\x60\x36\x39\x8e\xcd\x92\xa7\x17\x89\x6c\xb9\x71\x6a\x58\x2f\xf9\x78\xcb\x62\x3c\xbe\x6b\xfc\x13\x00\x00\xff\xff\x1c\xba\xd6\x39\x72\x08\x00\x00"),
		},
		"/ui": &vfsgen۰DirInfo{
			name:    "ui",
			modTime: time.Date(2018, 10, 12, 20, 52, 33, 979550324, time.UTC),
		},
		"/ui/app.html": &vfsgen۰CompressedFileInfo{
			name:             "app.html",
			modTime:          time.Date(2018, 10, 13, 0, 54, 18, 562601234, time.UTC),
			uncompressedSize: 313,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x41\xab\x83\x30\x10\x84\xef\xfe\x8a\x65\xe1\x1d\x1f\x79\xbc\xa3\xc6\x80\xf5\x07\x08\x6d\xe9\x5d\xdd\xb5\x86\x86\x08\xba\x55\xfc\xf7\x45\x53\x85\x82\x87\xe6\x92\x21\xf3\x4d\x06\x46\x57\x1d\xcd\x26\x02\x00\xd0\x64\x47\x18\x64\x76\x9c\xe2\x64\x49\xda\x18\xfe\xff\x7e\x12\x68\x5c\x57\x4a\x0c\x8e\x1b\x49\x30\xa0\x2b\x7e\x7a\x8a\x74\x1e\xc6\xdf\xca\x7a\x8a\x0b\x9f\x3b\x5b\x3f\x52\x2c\x7c\x46\x84\x26\x23\xd2\x2a\x20\xdf\x64\xce\x3c\xb0\xa0\x59\xaf\x83\xdc\xb5\x67\xbe\x59\x9e\x60\x7f\x5a\x4e\xcf\x4d\x8a\x9b\x85\x9f\xde\x5e\x71\x61\xc7\xb5\x2c\x1d\x41\xe1\x31\x96\xb7\xa5\xbf\xf3\x82\x05\x85\x46\xab\xed\xeb\xf7\x3e\x8a\xec\x68\x22\xad\xd6\xc9\x5e\x01\x00\x00\xff\xff\x14\x83\x94\x60\x39\x01\x00\x00"),
		},
		"/ui/button.html": &vfsgen۰FileInfo{
			name:    "button.html",
			modTime: time.Date(2018, 10, 12, 21, 23, 0, 217683840, time.UTC),
			content: []byte("\x3c\x64\x69\x76\x20\x63\x6c\x61\x73\x73\x3d\x22\x75\x69\x20\x62\x75\x74\x74\x6f\x6e\x22\x20\x76\x2d\x6f\x6e\x3a\x63\x6c\x69\x63\x6b\x3d\x22\x4f\x6e\x43\x6c\x69\x63\x6b\x22\x3e\x3c\x73\x6c\x6f\x74\x3e\x3c\x2f\x73\x6c\x6f\x74\x3e\x3c\x2f\x64\x69\x76\x3e"),
		},
		"/ui/treeview.html": &vfsgen۰CompressedFileInfo{
			name:             "treeview.html",
			modTime:          time.Date(2018, 10, 13, 1, 2, 10, 843201707, time.UTC),
			uncompressedSize: 763,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x41\x6f\xe2\x30\x10\x85\xef\xf9\x15\xa3\xd9\x95\x96\x48\x68\xc3\x19\x11\x6e\x7b\xdd\x3f\x80\x50\x65\xec\x09\x31\x38\x76\x6a\x8f\x69\x51\xc5\x7f\xaf\xec\x80\x0a\x24\x6a\x73\x48\x9c\xf9\x9e\x5f\xf4\xe2\xb7\x52\xfa\xb4\x2e\xd2\x1d\x3c\x35\x35\xfe\x33\xd4\x91\x65\x04\xad\x6a\x3c\x04\xf6\x44\xb8\x5e\x55\x83\x2a\x48\xaf\x7b\x5e\x17\x00\x00\xbf\x67\xf8\xeb\xca\xcb\xbf\xc3\x62\xf6\x91\x49\xba\x50\x3a\x4f\xb8\x84\xaf\x49\x9e\x72\x4b\x1d\x85\xd1\x3c\x33\xe5\x38\x91\x46\x98\x40\x0f\xf4\x32\x7f\x34\x11\x56\x77\x82\xb5\xb3\x08\x4b\x58\x3c\x41\xd9\x92\x3c\xbe\x48\x61\xcc\x4e\xc8\x63\x52\xb0\x8f\xf4\x24\x52\x82\x45\x42\x1b\xfc\xef\x14\xe1\xb6\x98\xf8\x14\xf6\x26\xee\xb5\x0d\x59\x97\xf2\x58\xa6\x77\xee\xc8\x46\x9c\x03\xf2\xb9\xa7\x90\x16\xca\x2a\x84\xed\xdd\xb6\x81\xc0\x28\xba\xa2\x46\x44\xc3\x63\x92\xa9\x96\x43\x1c\x6c\xb4\x21\xc8\x6f\xdf\xfe\x03\x45\x9d\xfb\xc9\x6a\xe7\x85\x36\xd3\x6e\xcf\x81\x2f\x65\x7e\x54\x15\xb4\x64\x7a\xf2\x20\x42\xd0\x7b\x9b\x9a\x10\x20\x38\x78\x23\x50\xce\xfe\x61\x68\xc5\x89\x80\x1d\xdc\xe4\x31\x10\x1c\x5e\x23\xf9\x33\x34\xde\x75\xb0\x77\xa3\x72\x6c\x16\xdb\x6b\x3f\xa0\x9e\x6c\x4d\x3a\xa0\x72\x72\x9b\xb3\x50\x43\x13\xad\x4c\xa7\x3d\xa3\x13\x59\x9e\x43\x2b\xac\x32\xe4\xcb\xbb\xec\x0f\xae\x63\xe5\x10\xb1\x58\x55\xb7\xfe\x0e\x7d\xfe\x0c\x00\x00\xff\xff\x94\xbc\x03\x63\xfb\x02\x00\x00"),
		},
		"/wasm": &vfsgen۰DirInfo{
			name:    "wasm",
			modTime: time.Date(2018, 10, 12, 20, 18, 19, 636962373, time.UTC),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/assets"].(os.FileInfo),
		fs["/dev"].(os.FileInfo),
		fs["/static"].(os.FileInfo),
		fs["/ui"].(os.FileInfo),
		fs["/wasm"].(os.FileInfo),
	}
	fs["/static"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/static/index.html"].(os.FileInfo),
	}
	fs["/ui"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/ui/app.html"].(os.FileInfo),
		fs["/ui/button.html"].(os.FileInfo),
		fs["/ui/treeview.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
